#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import h5py
from scipy import signal
from scipy.interpolate import interp1d
import sys, os

# This script is based off work by Jia Liu, Chun Shen and Ulrich Heinz
# arXiv 1504.02160 as well as work by Wojciech Broniowski, Wojciech 
# Florkowski, Mikolaj Chojnacki and Adam Kisiel 10.1103/PhysRevC.80.034902. 
# Please cite the original authors if you use this in your work.
# Jia Liu's C++ code is publicly available at  https://github.com/JiaLiu11

def kernel(t0, step=0.1):
    nstep = int(2*t0/step + 1)
    x, y = np.linspace(-t0,t0,nstep), np.linspace(-t0,t0,nstep)
    X, Y = np.meshgrid(x,y)
    r = np.sqrt(X*X + Y*Y)

    k = np.zeros_like(r)
    k[np.abs(r - t0) < 0.75*step] = 1. # ring of radius r = tau
    k /= k.sum() # normalize the kernel

    kx = k*X/t0 # ring*cos(theta)
    ky = k*Y/t0 # ring*sin(theta)
    kxy = k*X*Y/(t0*t0) # ring*cos(theta)*sin(theta)
    kxx = k*X*X/(t0*t0) # ring*cos(theta)**2
    kyy = k*Y*Y/(t0*t0) # ring*sin(theta)**2
    
    return k, kx, ky, kxy, kxx, kyy

def timelike(eigenvals, eigenvecs):
    for e, v in zip(eigenvals, eigenvecs.T):
        # select positive, real eigenvalue and real eigenvector
        if (e.imag == 0) and (e.real > 0) and (v[0].imag == 0) and (2.*v[0].real**2 - 1. > 0):
            # normalize eigenvector in Minkowski space 
            return e.real, v.real*np.sign(v[0].real)/np.sqrt(2.*v[0].real**2 - 1.)
    else:
        return 0, (1,0,0)

def main():

    tau = 1. # thermalization time tau
    factor = 0.408 # overall norm is arbitrary, to compare with Jia Liu

    # initialize 2D grid
    xymax, nstep = 13, 261
    x, y = np.linspace(-xymax,xymax,nstep), np.linspace(-xymax,xymax,nstep)
    X, Y = np.meshgrid(x,y)

    # make distribution function f(x,y,tau0)
    density = np.exp(-(.3*(X*X) + .1*(Y*Y)))
    #with h5py.File('events.hdf') as f:
    #    density = np.array(f['event_2'])
    #    print(density.shape)

    # calculate components of T^\mu\nu using FFT convolution
    k, kx, ky, kxy, kxx, kyy = kernel(tau)
    T00 = signal.fftconvolve(density, k, mode='same')*factor/tau
    T01 = signal.fftconvolve(density, kx, mode='same')*factor/tau
    T02 = signal.fftconvolve(density, ky, mode='same')*factor/tau
    T11 = signal.fftconvolve(density, kxx, mode='same')*factor/tau
    T12 = signal.fftconvolve(density, kxy, mode='same')*factor/tau
    T22 = signal.fftconvolve(density, kyy, mode='same')*factor/tau
    Tuv = np.array([[T00, T01, T02], [T01, T11, T12], [T02, T12, T22]])
    
    # initialize freestreaming output
    energy = np.zeros((nstep,nstep))
    pressure = np.zeros((nstep,nstep))
    velocity = np.zeros((nstep,nstep,4))
    shear = np.zeros((nstep,nstep,4,4))
    bulk = np.zeros((nstep,nstep))
    
    # define metric tensor g
    g = [[1,0,0],[0,-1,0],[0,0,-1]]
    
    # calculate e, P(e), pi and Pi using eigen decomposition and Landau matching
    for i, j in np.ndindex(nstep,nstep):

        #  skip low density regions
        if T00[i,j] < 1e-9:
            continue
        
        # Define T and g*T
        T, T_ = Tuv[:,:,i,j], np.dot(g,Tuv[:,:,i,j])

        # Solve eigenvector eqn  T^\mu\nu v_\nu = e g^\mu\nu v_\nu
        eigenvals, eigenvecs = np.linalg.eig(T_)
        e, u_ = timelike(eigenvals, eigenvecs)
        u = np.einsum('u,uv',u_,g)

        # define bulk viscous corrections
        P = lambda x: x/3. # pressure for ideal EOS
        delta = g - np.einsum('u,v', u, u) # projection operator delta^\mu\nu
        Pi = -np.einsum('uv,uv',delta,T)/3. - P(e) # bulk viscous pressure
        
        # define shear viscous corrections
        pi = T - e*np.einsum('u,v', u, u) + (P(e) + 0.)*delta # shear viscous pressure

        # populate arrays
        energy[i,j] = e
        pressure[i,j] = P(e)
        velocity[i,j,:3] = u
        shear[i,j,:3,:3] = pi
        bulk[i,j] = Pi


    plt.plot(np.linspace(-13,13,261), density[130,:], 'r-', label='f (y=0)')
    plt.plot(np.linspace(-13,13,261), density[:,130], 'b--', label='f (x=0)')
    plt.plot(np.linspace(-13,13,261), velocity[130,:,1], 'r-', label='ux (y=0)')
    plt.plot(np.linspace(-13,13,261), velocity[:,130,2], 'b--', label='uy (x=0)')
    plt.show()


    # save to file
    directory = 'scott/'
    if not os.path.exists(directory):
        os.makedirs(directory)
 
    np.savetxt(directory + 'T00.dat', T00)
    np.savetxt(directory + 'T01.dat', T01)
    np.savetxt(directory + 'T02.dat', T02)
    np.savetxt(directory + 'T11.dat', T11)
    np.savetxt(directory + 'T22.dat', T22)
    np.savetxt(directory + 'f.dat', density)
    np.savetxt(directory + 'ed.dat', energy)
    np.savetxt(directory + 'ux.dat', velocity[:,:,1])
    np.savetxt(directory + 'uy.dat', velocity[:,:,2])
    np.savetxt(directory + 'P.dat', pressure)
    np.savetxt(directory + 'Pi.dat', bulk)
    np.savetxt(directory + 'pi00.dat', shear[:,:,0,0])
    np.savetxt(directory + 'pi01.dat', shear[:,:,0,1])
    np.savetxt(directory + 'pi02.dat', shear[:,:,0,2])
    np.savetxt(directory + 'pi12.dat', shear[:,:,1,2])
    np.savetxt(directory + 'pi11.dat', shear[:,:,1,1])
    np.savetxt(directory + 'pi22.dat', shear[:,:,2,2])

if __name__ == "__main__":
    main()
