#!/usr/bin/env python3

import numpy as np
import matplotlib.pyplot as plt
import h5py
from scipy import signal
from scipy.interpolate import interp1d
import sys, os


def kernel(t0, step=0.1):
    nstep = int(2*t0/step + 1)
    y, x = np.ogrid[-t0:t0:nstep*1j, -t0:t0:nstep*1j]
    r = np.sqrt(x*x + y*y)

    k = np.zeros_like(r)
    k[np.abs(r - t0) < .5*step] = 1.
    k /= k.sum()/step*step

    kx = k*x/t0
    ky = k*y/t0
    kxy = k*x*y/(t0*t0)
    kxx = k*x*x/(t0*t0)
    kyy = k*y*y/(t0*t0)
    
    return k, kx, ky, kxy, kxx, kyy

def timelike(eigenvals, eigenvecs):
    for e, v in zip(eigenvals, eigenvecs.T):
        if v[0]**2 - v[1]**2 - v[2]**2 > 0:
            return e, v
    else:
        return e, [1, 0, 0]

def main():
    # thermalization time tsw
    tsw = float(sys.argv[1])

    # initialize 2D grid
    xymax, nstep = 10, 200
    X, Y = np.meshgrid(np.linspace(-xymax,xymax,nstep), np.linspace(-xymax,xymax,nstep))

    #s = np.exp(-(.3*(X*X) + .1*(Y*Y)))
    with h5py.File('events.hdf') as f:
        s = np.array(f['event_2'])

    # load equation of state
    def P(e):
        return e/3.
    
    # calculate components of T^\mu\nu using FFT convolution
    k, kx, ky, kxy, kxx, kyy = kernel(tsw)
    T00 = signal.fftconvolve(s, k, mode='same')
    T01 = signal.fftconvolve(s, kx, mode='same')
    T02 = signal.fftconvolve(s, ky, mode='same')
    T10 = T01
    T11 = signal.fftconvolve(s, kxx, mode='same')
    T12 = signal.fftconvolve(s, kxy, mode='same')
    T20 = T02
    T21 = T12
    T22 = signal.fftconvolve(s, kyy, mode='same')
    Tuv = np.array([[T00, T01, T02], [T10, T11, T12], [T20, T21, T22]]).T

    # initialize freestreaming output
    energy = np.zeros((nstep,nstep))
    pressure = np.zeros((nstep,nstep))
    velocity = np.zeros((nstep,nstep,4))
    shear = np.zeros((nstep,nstep,4,4))
    bulk = np.zeros((nstep,nstep))
    
    # define contravariant and covariants metrics g^\munu
    g = [[-1,0,0],[0,1,0],[0,0,1]]
    g_ = [[1,0,0],[0,-1,0],[0,0,-1]]
    
    # calculate e, P(e), pi and Pi using eigen decomposition and Landau matching
    for ix, iy in np.ndindex(nstep,nstep):
        
        # reverse x, y to undo transposition
        T = Tuv[iy,ix]
        
        # solve eigenvector eqn T^\mu\nu u_\nu = e u^\mu (reverse x,y to undo transposition)
        eigenvals, eigenvecs = np.linalg.eigh(T)
        e, u = timelike(eigenvals, eigenvecs)
        
        # define bulk viscous corrections
        delta_ = np.diag([1,1,1]) - np.einsum('u,v,uv', u, u, g_)
        Pi = -np.einsum('uv,uv',delta_,T)/3. - P(e) 
        
        # define shear viscous corrections
        delta = g - np.einsum('u,v', u, u)
        pi = T - e*np.einsum('u,v', u, u) + (P(e) + Pi)*delta
       
        # populate arrays
        energy[ix,iy] = e
        pressure[ix,iy] = P(e)
        velocity[ix,iy] = np.append(u,0)
        shear[ix,iy] = pi.resize(4,4)
        bulk[ix,iy] = Pi

    # plot it
    plt.imshow(bulk)
    plt.show() 

if __name__ == "__main__":
    main()
